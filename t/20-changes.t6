use Test;
use Test::When <author>;
use Docker::API;

plan 9;

my $docker = Docker::API.new;

ok $docker.image-create(fromImage => 'alpine', tag => 'latest'), 'image pull';

ok my $created = $docker.container-create(name => 'perltesting',
                                          Image => 'alpine',
                                          Cmd => ( '/bin/sleep', '30') ),
    'create container';

my $id = $created<Id>;

ok $docker.container-start(:$id), 'start container';

ok $docker.exec(:$id, :Detach,
                Cmd => ( '/bin/touch', '/newfile' )),
    'make a new file';

is-deeply $docker.container-changes(:$id),
    [ { Kind => 1, Path => '/newfile' }, ],
    'Added a file';

ok $docker.exec(:$id, :Detach,
                Cmd => ( '/bin/rm', '/etc/issue' )),
    'Remove a file';

is-deeply $docker.container-changes(:$id).sort,
    [ { Kind => 1, Path => '/newfile' },
      { Kind => 0, Path => '/etc' },
      { Kind => 2, Path => '/etc/issue' } ].sort,
    'Deleted a file and changed its directory';

ok $docker.container-stop(:$id, :0t), 'stop container';

ok $docker.container-remove(:$id), 'remove container';

done-testing;
